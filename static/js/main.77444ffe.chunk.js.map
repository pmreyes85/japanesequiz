{"version":3,"sources":["App.js","index.js"],"names":["shuffleArray","array","i","length","j","Math","floor","random","temp","App","className","Values","useState","listIndex","setListIndex","wordIndex","setWordIndex","lists","shuffledArray","setShuffledArray","currentLength","setCurrentLength","currentWord","setCurrentWord","answerVisible","setAnswerVisible","showPrevWord","index","showNextWord","getNextWordIndex","handleKeyPress","useCallback","event","preventDefault","key","shiftKey","useEffect","document","addEventListener","removeEventListener","Form","Label","Row","word","Group","as","column","meaning","pronunciation","spelling","keyboard","Stack","direction","gap","Button","onClick","variant","arr","getNextListIndex","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.77444ffe.chunk.js","sourcesContent":["import \"./styles.css\";\nimport { useState } from \"react\";\nimport lists from \"./data\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Form, Row, Button, Stack } from \"react-bootstrap\";\nimport { useCallback, useEffect } from 'react';\n\nfunction shuffleArray(array) {\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\n\nfunction getNextListIndex(index) {\n  return index === lists.length - 1 ? 0 : index + 1;\n}\n\nfunction getPrevWordIndex(index) {\n  return index <= 0 ? 0 : index - 1;\n}\n\nfunction getNextWordIndex(index, listIndex) {\n  return index === lists[listIndex].length - 1 ? 0 : index + 1;\n}\n\nfunction getListLabel(index) {\n  if(index === 0) {\n    return \"Hiragana\";\n  } else if(index === 1) {\n    return \"Hiragana Words\";\n  } else if(index === 2) {\n    return \"Katakana\";\n  } else if(index === 3) {\n    return \"Katakana Words\";\n  } else {\n    return \"ERROR\";\n  }\n}\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>My Japanese Quiz</h1>\n      <h2>What is the English for the Japanese word shown?</h2>\n      <Values />\n      <br/>\n      <p>\n        Commands:\n        <ul>\n          <li>Left Arrow: Previous word</li>\n          <li>Right Arrow: Next word</li>\n          <li>Shift: Show/Hide answers</li>\n        </ul>\n      </p>\n    </div>\n  );\n}\n\nfunction Values() {\n  const [listIndex, setListIndex] = useState(0);\n  const [wordIndex, setWordIndex] = useState(0);\n  const [shuffledArray, setShuffledArray] = useState(lists[listIndex]);\n  const [currentLength, setCurrentLength] = useState(shuffledArray.length);\n  const [currentWord, setCurrentWord] = useState(shuffledArray[wordIndex]);\n  const [answerVisible, setAnswerVisible] = useState(false);\n\n  function showPrevWord() {\n    var i = getPrevWordIndex(wordIndex,listIndex);\n    setWordIndex(i);\n    setCurrentWord(shuffledArray[i]);\n    setAnswerVisible(false);\n  }\n  function showNextWord() {\n    var i = getNextWordIndex(wordIndex,listIndex);\n    setWordIndex(i);\n    setCurrentWord(shuffledArray[i]);\n    setAnswerVisible(false);\n  }\n\n  // handle what happens on key press\n  const handleKeyPress = useCallback((event) => {\n    event.preventDefault();\n    if(event.key === 'ArrowRight') {\n      showNextWord();\n    }\n    if(event.key === 'ArrowLeft') { \n      showPrevWord();\n    }\n    if(event.shiftKey) {\n      setAnswerVisible(!answerVisible);\n    }\n  }, [wordIndex,answerVisible]);\n\n  useEffect(() => {\n    // attach the event listener\n    document.addEventListener('keydown', handleKeyPress);\n\n    // remove the event listener\n    return () => {\n      document.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [handleKeyPress]);\n\n  return (\n    <Form className=\"mx-auto w-50\">\n      <h2>{getListLabel(listIndex)}</h2>\n      <Form.Label>\n        Question {wordIndex + 1} of {currentLength}\n      </Form.Label>\n      <Row>\n        <p className=\"h1\">{currentWord.word}</p>\n      </Row>\n      <Form.Group as={Row}>\n        <Form.Label column>Meaning</Form.Label>\n        <Form.Label column className={answerVisible ? \"visible\" : \"invisible\"}>\n          {currentWord.meaning}\n        </Form.Label>\n      </Form.Group>\n      <Form.Group as={Row}>\n        <Form.Label column>Pronunciation</Form.Label>\n        <Form.Label column className={answerVisible ? \"visible\" : \"invisible\"}>\n          {currentWord.pronunciation}\n        </Form.Label>\n      </Form.Group>\n      <Form.Group as={Row}>\n        <Form.Label column>Spelling</Form.Label>\n        <Form.Label column className={answerVisible ? \"visible\" : \"invisible\"}>\n          {currentWord.spelling}\n        </Form.Label>\n      </Form.Group>\n      <Form.Group as={Row} className=\"mb-3\">\n        <Form.Label column>Keyboard</Form.Label>\n        <Form.Label column className={answerVisible ? \"visible\" : \"invisible\"}>\n          {currentWord.keyboard}\n        </Form.Label>\n      </Form.Group>\n      <Stack direction=\"horizontal\" gap={2}>\n      <Button\n          onClick={() => showPrevWord()}\n        >\n          Previous\n        </Button>\n        <Button\n          onClick={() => showNextWord()}\n        >\n          Next\n        </Button>\n        <Button\n          variant=\"secondary\"\n          onClick={() => setAnswerVisible(!answerVisible)}\n        >\n          {answerVisible ? \"Hide Answers\" : \"Show Answers\"}\n        </Button>\n        <Button\n          variant=\"info\"\n          onClick={() => {\n            var arr = shuffleArray(lists[listIndex]);\n            setShuffledArray(arr);\n            setWordIndex(0);\n            setCurrentWord(arr[0]);\n          }}\n        >\n          Shuffle\n        </Button>\n        <Button\n          variant=\"info\"\n          onClick={() => {\n            var i = getNextListIndex(listIndex);\n            setListIndex(i);\n            var arr = shuffleArray(lists[i]);\n            setShuffledArray(arr);\n            setWordIndex(0);\n            setCurrentWord(arr[0]);\n            setCurrentLength(arr.length);\n          }}\n        >\n          Change List\n        </Button>\n      </Stack>\n    </Form>\n  );\n}","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}