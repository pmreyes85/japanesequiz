{"version":3,"sources":["App.js","index.js"],"names":["shuffleArray","array","i","length","j","Math","floor","random","temp","App","className","Values","index","useState","listIndex","setListIndex","wordIndex","setWordIndex","lists","shuffledArray","setShuffledArray","currentLength","setCurrentLength","currentWord","setCurrentWord","answerVisible","setAnswerVisible","Form","Label","Row","word","Group","as","column","meaning","pronunciation","spelling","keyboard","Stack","direction","gap","Button","onClick","getNextWordIndex","variant","arr","getNextListIndex","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.762cd642.chunk.js","sourcesContent":["import \"./styles.css\";\nimport { useState } from \"react\";\nimport lists from \"./data\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Form, Row, Button, Stack } from \"react-bootstrap\";\n\nfunction shuffleArray(array) {\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\n\nfunction getNextListIndex(index) {\n  return index === lists.length - 1 ? 0 : index + 1;\n}\n\nfunction getNextWordIndex(index, listIndex) {\n  return index === lists[listIndex].length - 1 ? 0 : index + 1;\n}\n\nfunction getListLabel(index) {\n  if(index === 0) {\n    return \"Hiragana\";\n  } else if(index === 1) {\n    return \"Hiragana Words\";\n  } else if(index === 2) {\n    return \"Katakana\";\n  } else {\n    return \"ERROR\";\n  }\n}\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>My Japanese Quiz</h1>\n      <h2>What is the English for the Japanese word shown?</h2>\n      <Values />\n    </div>\n  );\n}\n\nfunction Values() {\n  const [listIndex, setListIndex] = useState(0);\n  const [wordIndex, setWordIndex] = useState(0);\n  const [shuffledArray, setShuffledArray] = useState(lists[listIndex]);\n  const [currentLength, setCurrentLength] = useState(shuffledArray.length);\n  const [currentWord, setCurrentWord] = useState(shuffledArray[wordIndex]);\n  const [answerVisible, setAnswerVisible] = useState(false);\n\n  return (\n    <Form className=\"mx-auto w-50\">\n      <h2>{getListLabel(listIndex)}</h2>\n      <Form.Label>\n        Question {wordIndex + 1} of {currentLength}\n      </Form.Label>\n      <Row>\n        <p className=\"h1\">{currentWord.word}</p>\n      </Row>\n      <Form.Group as={Row}>\n        <Form.Label column>Meaning</Form.Label>\n        <Form.Label column className={answerVisible ? \"visible\" : \"invisible\"}>\n          {currentWord.meaning}\n        </Form.Label>\n      </Form.Group>\n      <Form.Group as={Row}>\n        <Form.Label column>Pronunciation</Form.Label>\n        <Form.Label column className={answerVisible ? \"visible\" : \"invisible\"}>\n          {currentWord.pronunciation}\n        </Form.Label>\n      </Form.Group>\n      <Form.Group as={Row}>\n        <Form.Label column>Spelling</Form.Label>\n        <Form.Label column className={answerVisible ? \"visible\" : \"invisible\"}>\n          {currentWord.spelling}\n        </Form.Label>\n      </Form.Group>\n      <Form.Group as={Row} className=\"mb-3\">\n        <Form.Label column>Keyboard</Form.Label>\n        <Form.Label column className={answerVisible ? \"visible\" : \"invisible\"}>\n          {currentWord.keyboard}\n        </Form.Label>\n      </Form.Group>\n      <Stack direction=\"horizontal\" gap={2}>\n        <Button\n          onClick={function () {\n            var i = getNextWordIndex(wordIndex,listIndex);\n            setWordIndex(i);\n            setCurrentWord(shuffledArray[i]);\n            setAnswerVisible(false);\n          }}\n        >\n          Next Word\n        </Button>\n        <Button\n          variant=\"secondary\"\n          onClick={() => setAnswerVisible(!answerVisible)}\n        >\n          {answerVisible ? \"Hide Answers\" : \"Show Answers\"}\n        </Button>\n        <Button\n          variant=\"info\"\n          onClick={() => {\n            var arr = shuffleArray(lists[listIndex]);\n            setShuffledArray(arr);\n            setWordIndex(0);\n            setCurrentWord(arr[0]);\n          }}\n        >\n          Shuffle\n        </Button>\n        <Button\n          variant=\"info\"\n          onClick={() => {\n            var i = getNextListIndex(listIndex);\n            setListIndex(i);\n            var arr = shuffleArray(lists[i]);\n            setShuffledArray(arr);\n            setWordIndex(0);\n            setCurrentWord(arr[0]);\n            setCurrentLength(arr.length);\n          }}\n        >\n          Change List\n        </Button>\n      </Stack>\n    </Form>\n  );\n}","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}